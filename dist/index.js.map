{"version":3,"sources":["../index.ts","../utils/counter.ts","../components/header.ts","../components/counter.ts","../components/button.tsx","../components/input.tsx","../components/select.tsx","../components/textArea.tsx","../components/customSwitch.tsx","../components/customCard.tsx","../components/customModal.tsx"],"sourcesContent":["// utils\nexport { setupCounter } from \"./utils/counter\";\n\n// components\nexport { Header } from \"./components/header\";\nexport { Counter } from \"./components/counter\";\nexport { Button } from \"./components/button\";\n// packages/ui/index.ts\nexport * from './components/input';\nexport * from './components/select';\nexport * from './components/textArea';\nexport * from './components/customSwitch';\nexport * from './components/customCard';\nexport * from './components/customModal';\n","export function setupCounter(element: HTMLButtonElement) {\n  let counter = 0;\n  const setCounter = (count: number) => {\n    counter = count;\n    element.innerText = `count is ${counter}`;\n  };\n  element.addEventListener(\"click\", () => setCounter(++counter));\n  setCounter(0);\n}\n","export function Header({ title }: { title: string }) {\n  return `\n    <header id=\"header\">\n      <h1>${title}</h1>\n    </header>\n    `;\n}\n","export function Counter() {\n  return `<button id=\"counter\" type=\"button\"></button>`;\n}\n","import React from 'react'\n\nexport const Button = () => {\n   return <button></button>;\n}\n","import React from 'react';\nimport { Input as ChakraInput, FormControl, FormLabel, InputProps } from '@chakra-ui/react';\n\ninterface CustomInputProps extends InputProps {\n  label?: string;\n  name: string;\n}\n\nexport const Input: React.FC<CustomInputProps> = ({ label, name, ...props }) => {\n  return (\n    <FormControl id={name}>\n      {label && <FormLabel>{label}</FormLabel>}\n      <ChakraInput name={name} {...props} />\n    </FormControl>\n  );\n};\n","import React from 'react';\nimport { Select as ChakraSelect, FormControl, FormLabel, SelectProps } from '@chakra-ui/react';\n\ninterface Option {\n  label: string;\n  value: string | number;\n}\n\ninterface CustomSelectProps extends SelectProps {\n  label?: string;\n  name: string;\n  option: Option[];\n}\n\nexport const Select: React.FC<CustomSelectProps> = ({\n  label = '',\n  name = '',\n  option = [],\n  size = 'md',\n  ...rest\n}) => {\n  return (\n    <FormControl id={name}>\n      {label && <FormLabel>{label}</FormLabel>}\n      <ChakraSelect placeholder={`Select ${label}`} size={size} {...rest}>\n        {option.map((opt) => (\n          <option key={opt.value} value={opt.value}>\n            {opt.label}\n          </option>\n        ))}\n      </ChakraSelect>\n    </FormControl>\n  );\n};\n","import { FormControl, FormLabel, Textarea, TextareaProps } from '@chakra-ui/react'\nimport React from 'react'\n\ninterface CustomTextAreaProps extends TextareaProps {\n    label?: string;\n    name: string;\n    props?: any; // Additional props to pass down to the textarea component.\n}\n\n\nexport const TextArea: React.FC<CustomTextAreaProps> = ({ label, name, ...props }) => {\n    return (\n        <>\n            <FormControl id={name}>\n                {label && <FormLabel>{label}</FormLabel>}\n                <Textarea name={name} placeholder='Here is a sample placeholder' {...props}  />\n            </FormControl>\n        </>\n    )\n}\n","import React from 'react'\nimport { FormControl, FormLabel, Switch, SwitchProps } from '@chakra-ui/react'\n\ninterface CustomSwitchProps extends SwitchProps {\n  label?: string;\n}\n\nexport const CustomSwitch: React.FC<CustomSwitchProps> = ({\n  label = 'Enable email alerts?',\n  ...rest\n}) => {\n    return (\n        <FormControl display='flex' alignItems='center'>\n            <FormLabel htmlFor='email-alerts' mb='0'>\n                {label}\n            </FormLabel>\n            <Switch id='email-alerts' {...rest} />\n        </FormControl>\n    )\n}","import { Button, Card, CardBody, CardFooter, CardHeader, CardProps, Image } from '@chakra-ui/react'\nimport React, { ReactNode } from 'react'\n\ninterface CustomCardProps extends CardProps {\n    isHeader?: boolean;\n    isFooter?: boolean;\n    headerContent?: ReactNode;\n    footerContent?: ReactNode;\n    cardMainContent?: ReactNode;\n}\n\nexport const CustomCard: React.FC<CustomCardProps> = ({\n    isHeader = false,\n    isFooter = false,\n    headerContent = <></>,\n    footerContent = <></>,\n    cardMainContent = <></>,\n    ...rest\n}) => {\n    return (\n        <Card maxW='md' {...rest}>\n            {isHeader && <CardHeader>\n                {headerContent}\n            </CardHeader>}\n            <CardBody>\n                {cardMainContent}\n            </CardBody>\n            <Image\n                objectFit='cover'\n                src='https://images.unsplash.com/photo-1531403009284-440f080d1e12?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80'\n                alt='Chakra UI'\n            />\n\n            {isFooter && <CardFooter\n                justify='space-between'\n                flexWrap='wrap'\n                sx={{\n                    '& > button': {\n                        minW: '136px',\n                    },\n                }}\n            >\n                <Button flex='1' variant='ghost' leftIcon={<></>}>\n                    Like\n                </Button>\n                <Button flex='1' variant='ghost' leftIcon={<></>}>\n                    Comment\n                </Button>\n                <Button flex='1' variant='ghost' leftIcon={<></>}>\n                    Share\n                </Button>\n                {footerContent}\n            </CardFooter>}\n        </Card>\n    )\n}","import { Button, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, ModalProps, Text } from '@chakra-ui/react'\nimport React from 'react'\n\ninterface CustomModalProps extends ModalProps {\n    isOpen: boolean;\n    onClose: () => void;\n    children: React.ReactNode;\n}\n\nexport const CustomModal: React.FC<CustomModalProps> = ({ isOpen = false, onClose, children = <></> }) => {\n    return (\n        <Modal isCentered isOpen={isOpen} onClose={onClose}>\n            {isOpen && (\n                <ModalOverlay\n                    bg=\"blackAlpha.300\"\n                    backdropFilter=\"blur(10px) hue-rotate(90deg)\"\n                />\n            )}\n            <ModalContent>\n                <ModalHeader>Modal Title</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    <Text>Custom backdrop filters!</Text>\n                    {children}\n                </ModalBody>\n                <ModalFooter>\n                    <Button onClick={onClose}>Close</Button>\n                </ModalFooter>\n            </ModalContent>\n        </Modal>\n    );\n};\n"],"mappings":"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","names":["React","import_react","React","ChakraInput","import_react","React","ChakraSelect","import_react","React","import_react","React","import_react","React","import_react","React"]}